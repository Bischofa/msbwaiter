% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/api_check_batch.R
\name{api_check_batch}
\alias{api_check_batch}
\title{Create or update MS Bioscreen data entries?}
\usage{
api_check_batch(sufl_batch, endpoint, ignore_colnames = c("first_name",
  "last_name"), base_url = "https://msbioscreen-uat.herokuapp.com/api/v1",
  token = get_token(), verbose_b = TRUE, keep_na = FALSE,
  change = FALSE, destructive = FALSE, max_update = 200,
  max_delete = 200)
}
\arguments{
\item{sufl_batch}{a data frame with any number of rows and column names that follow the current SUFL specification (1.0). At minimum, sufl_batch
must contain the identifier columns "source_id" and "external_identifier". For attacks, treatments and visits data, sufl_batch
must also contain the identifier columns "patient_source_id" and "patient_external_identifier".}

\item{endpoint}{the data endpoint of interest. Possible values are "subjects", "attacks",
"treatments", and "visits".}

\item{ignore_colnames}{the names of the variables whose values should not be updated in the bioscreen. Set to NULL to allow any
variable to be updated in the bioscreen if its value is different in the inputed sufl data set.}

\item{base_url}{the API base URL.}

\item{token}{HTTP authorization token. Default is to get environment variable 'MSBWAITER_TOKEN'.}

\item{verbose_b}{print progress messages as function runs?}

\item{keep_na}{when there is an NA value in the sufl data set that is not NA in the
corresponding bioscreen data entry, should the value in the bioscreen be overwritten to NA? Default
is set to FALSE so that non-missing values in the bioscreen are not overwritten to NA.}

\item{change}{should the function proceed to actually create and update entries in the bioscreen?
Default is set to FALSE.}

\item{destructive}{if TRUE and change = TRUE, \code{api_check_batch} will delete any data in the bioscreen that is not found in \code{sufl_batch} but that
has the same \code{source_id} as \code{sufl_batch}.}

\item{max_update}{the maximum number of entries that you expect will need to be updated. If there are more than max_update entries to update,
\code{api_check_batch} will not proceed to create/update/delete entries in the bioscreen even if \code{change} is equal to TRUE. Set to NA for no restriction
on max_update.}

\item{max_delete}{the maximum number of entries that you expect will need to be deleted from the bioscreen when destructive = TRUE. If there are more
than max_delete entries to delete, \code{api_check_batch} will not proceed to create/update/delete entries in the bioscreen even if \code{destructive} and \code{change}
are equal to TRUE. Set to NA for no restriction on max_delete.}
}
\value{
\code{api_check_batch} returns a list of length 2. The first entry in the list is a vector the same length as the number
of rows in \code{sufl_batch} where each entry of the vector is either create', 'update', or 'no action'. See ?\code{api_check}
for more details. The second entry in the list is the number of entries that were found in the bioscreen but not in \code{sufl_batch}.
}
\description{
\code{api_check_batch} fetches all the bioscreen data for the specified endpoint. \code{api_check_batch} then compares each entry
in the inputed sufl data set with the corresponding entry in the bioscreen data set. For each entry in the inputed sufl data set,
\code{api_check_batch} returns "create", "update", or "no action". When \code{change} is set to TRUE, \code{api_check_batch} will
proceed to actually create and update entries. \code{api_check_batch} is similar to \code{api_check} except that it can take a
sufl data set with multiple entries. When there is only one entry, use \code{api_check} for faster comparison. See ?\code{api_check}
for more details.
}
\seealso{
\code{\link{api_check}}, \code{\link{api_get_batch}}, \code{\link{api_create}},
\code{\link{api_update}}, \code{\link{to_json_non_array}}
}

